#–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ç—Ä–µ–¥—ã —á—Ç–æ–±—ã —Ä–æ–±–æ—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º –∏ —Ç–∞–π–º–µ—Ä–æ–º, –æ–¥–Ω–∞ –Ω–æ—á—å –¥–ª–∏—Ç—Å—è 630 —Å–µ–∫—É–Ω–¥(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è timer) –Ω–æ —Å–∞–º–∏ –æ–Ω–∏ –ø–æ —Å–µ–±–µ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–Ω—ã.
#—Ç–∞–º –≥–¥–µ —Ä–æ–±–æ—Ç—ã —Å—Ç–æ–∏—Ç –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–¥–µ—é—Å—å —Ç—ã —É–º–µ–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–±–µ–∫–æ–º –∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–ª–±–µ–∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.
#–¢–∞–∫–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥ –±–æ—Ç–æ–º –ø–æ—Ç–æ–º –∏–∑–º–µ–Ω—è—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö. –ö–∞–º–µ—Ä—ã —Ç–∞–∫–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
#–ò –¥–∞, –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ db_manager. –¢–∞–∫–∂–µ —Ç–æ —á—Ç–æ –ø–æ–±–µ–¥—ã –∏ –¥–µ–Ω—å–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–∏–Ω–≥ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ –¥—Ä—É–≥–æ–º—É –∫–æ–¥ –±—É–¥–µ—Ç –ª–æ–º–∞—Ç—å—Å—è.

from random import *
from config import *
from telebot import *
import logic as db_manager
import time, threading, art


bot = TeleBot(TOKEN)
timer = 630 
game_started = False
end = False
go_cleaner = False
cleaner_door_right = False
cleaner_door_left = False
cleaner_vine = False
cleaner_guest = False
cleaner_vent = False 
cleaner_storage = True #–≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ —É–±–æ—Ä—â–∏–∫–∞(cleaner_go –∑–∞ —Ç–æ –ø–æ–π–¥–µ—Ç –æ–Ω –∏–ª–∏ –Ω–µ—Ç –∞ –æ—Å—Ç–∞–ª—å–Ω–æ –∑–∞ —Ç–æ –≤ –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ –æ–Ω)
go_—Årazy = False #–ê —ç—Ç–∞ –∑–∞ –ø—Å–∏—Ö–∞.
go_hoverboard = False #–ó–∞ —Ö–æ–≤–µ—Ä–±–æ—Ä–¥
go_cyborg = False #–ö–ò–ë–û–†–ì –£–ë–´–ô–¶–ê
go_vodka = False #–ê —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞ –∞–ª–∫–æ–≥–æ–ª–∏–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç.
go_barmen = False #–ù—É –∏ –±–∞—Ä–º–µ–Ω
go_terminator = False #–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä, —Ç—Å—Å—Åü§´
left_door_statement = True #–ë—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–≤–æ–π –¥–≤–µ—Ä–∏
right_door_statement = True #–ë—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–æ–π –¥–≤–µ—Ä–∏
night = 1 #–≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—á–µ—Ç –Ω–æ—á–µ–π, –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–æ–±–æ—Ç—ã
end_bad = False
battery = 4
battery_timer = random.randint(100, 201)
battery_statement = True 
ventilation_statement = True
right_door_timer = 100
left_door_timer = 100
vent_timer = 80
hour = 0


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –∏–≥—Ä–æ–≤–æ–π —Ö–æ—Ä—Ä–æ—Ä –±–æ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏ /help.")


@bot.message_handler(commands=["help"])
def help(message):
    bot.reply_to(message, "–ú–æ–∏ –∫–æ–º–º–∞–Ω–¥—ã: /start - —Å—Ç–∞—Ä—Ç, /help - –ø–æ–º–æ—â—å, /menu - –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é.")


@bot.message_handler(commands=["menu"])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton('–ò–≥—Ä–∞—Ç—å', callback_data='button_game')
    item2 = types.InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å', callback_data='button_profile')
    markup.add(item1,item2)
    bot.send_message(message.chat.id, '–í–æ—Ç –º–µ–Ω—é:', reply_markup=markup)


@bot.callback_query_handler(func=lambda call:True)
def callback(call):

    global cleaner_door_right
    global cleaner_door_left
    global cleaner_guest
    global cleaner_vine
    global cleaner_storage 
    global game_started
    global left_door_statement
    global right_door_statement
    global end_bad
    global battery
    global battery_timer
    global battery_statement
    global ventilation_statement
    global left_door_timer
    global right_door_timer
    global vent_timer
    global end
    global go_cleaner
    global hour


    if call.message:

        if call.data == 'button_game':  
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä—ãüì∏', callback_data='button_camera')
            item2 = types.InlineKeyboardButton('–ß–∞—Å—ã‚è∞', callback_data='button_clocks')
            item3 = types.InlineKeyboardButton('–õ–µ–≤–∞—è –¥–≤–µ—Ä—åüö™', callback_data='button_left_door')
            item4 = types.InlineKeyboardButton('–ü—Ä–∞–≤–∞—è –¥–≤–µ—Ä—åüö™', callback_data='button_right_door')
            item5 = types.InlineKeyboardButton('–ú–∞–≥–∞–∑–∏–Ωüè¨', callback_data='button_shop')
            markup.add(item1, item2, item3, item4, item5)
            bot.send_photo(call.message.chat.id, open('./Images/Game/security_room.jpeg', 'rb'))
            bot.send_message(call.message.chat.id, '–í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º –≤ –±–∞—Ä–µ –≥–¥–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—è–≤–∏–ª–∏—Å—å –ò–ò —Ä–æ–±–æ—Ç—ã, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–≤ —É –Ω–∏—Ö –ø–æ—è–≤–∏–ª—Å—è —Ç–∞–∫–æ–π —Å–ø—Ä–æ—Å –Ω–∞ –æ—Ö—Ä–∞–Ω—É?\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞, –æ—Ö—Ä–∞–Ω—è—Ç—å –±–∞—Ä –¥–æ 6 —É—Ç—Ä–∞(–±–∞—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è), –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–º–µ—Ä—ã –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –¥–≤–µ—Ä–∏, –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ 7 –Ω–æ—á–µ–π, –∞ –ø–æ—Ç–æ–º –≤–∞—Å –∑–∞–º–µ–Ω–∏—Ç –Ω–∞ –≤—Ä–µ–º—è –¥—Ä—É–≥–æ–π –æ—Ö—Ä–∞–Ω–Ω–∏–∫, —É–¥–∞—á–∏!', reply_markup=markup)
            time.sleep(10)

            game_started = True
        
        elif call.data == 'button_profile':

            markup = types.InlineKeyboardMarkup(row_width=5)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back1')
            username = call.message.from_user.username
            profile = db_manager.show_profile(username)
            bot.send_message(call.message.chat.id, f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:(–ø–µ—Ä–≤–æ–µ —ç—Ç–æ –∏–º—è, –≤—Ç–æ—Ä–æ–µ —ç—Ç–æ –ø–æ–±–µ–¥—ã, –∞ —Ç—Ä–µ—Ç—å–µ —ç—Ç–æ –¥–µ–Ω—å–≥–∏.) {profile}', reply_markup=markup)
        
        elif call.data == 'button_camera':

            if battery_timer < 75 and battery_timer > 50:
                battery = 3
            elif battery_timer < 50  and battery_timer > 25:
                battery = 2
            elif battery_timer < 25  and battery_timer > 0:
                battery = 1
            elif battery_timer <= 0: 
                battery = 0
                battery_statement = False

            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞üì∑1', callback_data='button_camera1')
            item2 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞üì∑2', callback_data='button_camera2')
            item3 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞üì∑3', callback_data='button_camera3')
            item4 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞üì∑4', callback_data='button_camera4')
            item5 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞üì∑5', callback_data='button_camera5')
            item6 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')

            if battery_statement:
                markup.add(item1, item2, item3, item4, item5, item6) 
                bot.send_photo(call.message.chat.id, open('./Images/Game/cameras_plan.jpeg', 'rb'))
                bot.send_message(call.message.chat.id, f'–ó–∞—Ä—è–¥ –ø–ª–∞–Ω—à–µ—Ç–∞ —Ä–∞–≤–µ–Ω: {battery} –ö–∞–º–µ—Ä—ã:', reply_markup=markup)
            else:
                markup.add(item6) 
                bot.send_message(call.message.chat.id, f'–ü–ª–∞–Ω—à–µ—Ç —Ä–∞–∑—Ä—è–∂–µ–Ω! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–∞—Ç–∞—Ä–µ—é –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', reply_markup=markup)
        
        elif call.data == 'button_clocks':

            markup = types.InlineKeyboardMarkup(row_width=5)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            time_now = " "

            if timer <= 630 and timer > 540:
                time_now = "00:00"
                hour = 0
            elif timer <= 540 and timer > 450:
                time_now = "01:00"
                hour = 1
            elif timer <= 450 and timer > 360:
                time_now = "02:00"
                hour = 2
            elif timer <= 360 and timer > 270:
                time_now = "03:00"
                hour = 3
            elif timer <= 270 and timer > 180:
                time_now = "04:00"
                hour = 4
            elif timer <= 180 and timer > 90:
                time_now = "05:00"
                hour = 5
            elif timer <= 90 and timer > 0:
                time_now = "06:00"
                hour = 6
            elif timer == 0:
                time_now = "07:00"
                end = True

            markup.add(item1)
            bot.send_photo(call.message.chat.id, open('./Images/Game/clocks.jpg', 'rb')) #–î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–µ–π
            bot.send_message(call.message.chat.id, f'–°–µ–π—á–∞—Å {time_now} —á–∞—Å–æ–≤', reply_markup=markup)


        #–ó–¥–µ—Å—å —è –¥–æ–¥–µ–ª–∞–ª –∫–∞–º–µ—Ä—ã, –ø–æ–∫–∞ —É –Ω–∏—Ö –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, —Ö–æ—Ç—è —Å–æ–º–Ω–µ–≤–∞—é—Å—å, —á—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–ª–æ–∂–Ω–µ–µ.


        #–Ø –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª, –∫–∞–∫–∏–µ –∫–∞–º–µ—Ä—ã –±—É–¥—É—Ç, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ


        #–ö–∞–º–µ—Ä–∞ –≤ –∫–∞–º–æ—Ä–∫–µ —É–±–æ—Ä—â–∏–∫–∞ (–≠—Ç–∞ –∫–∞–º–µ—Ä–∞ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä—è–∂–∞–µ—Ç –ø–ª–∞–Ω—à–µ—Ç. –Ø —Å–¥–ª–µ–∞–ª —ç—Ç–æ —á–∏—Å—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∫–∏ :))) )
        elif call.data == "button_camera1":

            battery_timer -= 50 
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')
            markup.add(item1)

            if cleaner_storage == True:
                bot.send_photo(call.message.chat.id, open('./Images/Game/storage_cleaner.png', 'rb'))
            else:
                bot.send_photo(call.message.chat.id, open('./Images/Game/storage.jpeg', 'rb'))

            bot.send_message(call.message.chat.id, '–ö–∞–º–æ—Ä–∫–∞ —É–±–æ—Ä—â–∏–∫–∞', reply_markup=markup)

        #–ö–∞–º–µ—Ä–∞ —É –±–∞—Ä–∞ 
        elif call.data == "button_camera2":

            battery_timer -= 5
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')
            markup.add(item1)

            if cleaner_vine == True:
                bot.send_photo(call.message.chat.id, open('./Images/Game/vine_cleaner.png', 'rb'))
            else:
                bot.send_photo(call.message.chat.id, open('./Images/Game/vine_room.png', 'rb'))

            bot.send_message(call.message.chat.id, '–ë–∞—Ä', reply_markup=markup)

        #–ö–∞–º–µ—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –≥–æ—Å—Ç–µ–π
        elif call.data == "button_camera3":

            battery_timer -= 5
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')
            markup.add(item1)

            bot.send_photo(call.message.chat.id, open('./Images/Game/guest_room.jpeg', 'rb'))
            bot.send_message(call.message.chat.id, '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π', reply_markup=markup)
        
        #–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è
        elif call.data == "button_camera4":

            battery_timer -= 5
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')

            if ventilation_statement: #–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞

                item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_ventilation_statement')   
                markup.add(item1, item2)

                #if cleaner_door_left == True:
                ##    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_cleaner.png', 'rb'))
                #else:
                #    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_open.jpg', 'rb'))

                bot.send_photo(call.message.chat.id, open('./Images/Game/ventilation.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)

            else: #–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞

                item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_ventilation_statement')   
                markup.add(item1, item2)

                #if cleaner_door_left == True:
                #    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_cleaner.png', 'rb'))
                #else:
                #    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_closed.jpg', 'rb'))

                bot.send_photo(call.message.chat.id, open('./Images/Game/ventilation_closed.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)

            #bot.send_photo(call.message.chat.id, open('./Images/Game/ventilation.jpg', 'rb'))
            #bot.send_message(call.message.chat.id, '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è', reply_markup=markup)

        #–ö–∞–º–µ—Ä–∞ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–∞(—è –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, —á—Ç–æ —Å—é–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ))) )
        elif call.data == "button_camera5":

            battery_timer -= 5
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')
            markup.add(item1)

            bot.send_photo(call.message.chat.id, open('./Images/Game/broken_kamera.jpg', 'rb'))
            bot.send_message(call.message.chat.id, '(@%&#}KDBHV%#HB&J<|', reply_markup=markup)
        

        #–ù–∏–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–≤–µ—Ä–µ–π.

        #–õ–µ–≤–∞—è –¥–≤–µ—Ä—å

        elif call.data == "button_left_door":

            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            if left_door_statement: #–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞

                item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_left_door_statement')   
                markup.add(item1, item2)

                if cleaner_door_left == True:
                    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_cleaner.png', 'rb'))
                else:
                    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_open.jpg', 'rb'))

                bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)

            else: #–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞
                item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_left_door_statement')   
                markup.add(item1, item2)
                bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)



        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–µ—Ä–µ–π
        #–ï—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥, –±—É–¥—É —Ä–∞–¥. –Ø –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, –∫–∞–∫ —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å :(

        elif call.data == 'change_left_door_statement':
            left_door_statement = not left_door_statement #–ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            if battery_statement:
                if left_door_statement: #–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞
                    item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_left_door_statement')   
                    markup.add(item1, item2)
                    if cleaner_door_left == True:
                        bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_cleaner.png', 'rb'))
                    else:
                        left_door_timer = 100
                        bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_open.jpg', 'rb'))
                    bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)
                else: #–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞
                    item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_left_door_statement')   
                    markup.add(item1, item2)
                    bot.send_photo(call.message.chat.id, open('./Images/Game/left_door_closed.jpg', 'rb'))
                    bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)
            else: 
                markup.add(item2) 
                bot.send_message(call.message.chat.id, f'–ü–ª–∞–Ω—à–µ—Ç —Ä–∞–∑—Ä—è–∂–µ–Ω! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–∞—Ç–∞—Ä–µ—é –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', reply_markup=markup)
        
        
        #–ü—Ä–∞–≤–∞—è –¥–≤–µ—Ä—å (–∑–¥–µ—Å—å –≤—Å—ë –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.)

        elif call.data == "button_right_door":
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            if right_door_statement: #–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞
                item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_right_door_statement')   
                markup.add(item1, item2)
                if cleaner_door_right == True:
                    bot.send_photo(call.message.chat.id, open('./Images/Game/right_door_cleaner.png', 'rb'))
                else:
                    bot.send_photo(call.message.chat.id, open('./Images/Game/right_door_open.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)
            else: #–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞
                item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_right_door_statement')   
                markup.add(item1, item2)
                bot.send_photo(call.message.chat.id, open('./Images/Game/right_door_closed.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)


        elif call.data == 'change_right_door_statement':
            right_door_statement = not right_door_statement #–ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏
            if battery_statement:
                if right_door_statement: #–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞
                    item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_right_door_statement')   
                    markup.add(item1, item2)
                    bot.send_photo(call.message.chat.id, open('./Images/Game/right_door_open.jpg', 'rb'))
                    bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)
                else: #–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞
                    right_door_timer = 100
                    item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_right_door_statement')   
                    markup.add(item1, item2)
                    bot.send_photo(call.message.chat.id, open('./Images/Game/right_door_closed.jpg', 'rb'))
                    bot.send_message(call.message.chat.id, '–î–≤–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)
            else: 
                markup.add(item2) 
                bot.send_message(call.message.chat.id, f'–ü–ª–∞–Ω—à–µ—Ç —Ä–∞–∑—Ä—è–∂–µ–Ω! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–∞—Ç–∞—Ä–µ—é –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', reply_markup=markup)
        

        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏

        elif call.data == 'change_ventilation_statement':
            battery_timer -= 5
            ventilation_statement = not ventilation_statement #–ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–Ω—Ç–ª–∏—è—Ü–∏–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_camera')
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏

            if ventilation_statement: #–í–µ–Ω—Ç–∏–ª—è—Ü–∏ –æ—Ç–∫—Ä—ã—Ç–∞
                item1 = types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='change_ventilation_statement')   
                markup.add(item1, item2)
                bot.send_photo(call.message.chat.id, open('./Images/Game/ventilation.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=markup)
            else: #–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                vent_timer = 80
                item1 = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å', callback_data='change_ventilation_statement')   
                markup.add(item1, item2)
                bot.send_photo(call.message.chat.id, open('./Images/Game/ventilation_closed.jpg', 'rb'))
                bot.send_message(call.message.chat.id, '–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.', reply_markup=markup)



        #–ú–∞–≥–∞–∑–∏–Ω



        elif call.data == "button_shop":
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='back2')
            item2 = types.InlineKeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data='shop_assortiment')
            markup.add(item1, item2)
            bot.send_photo(call.message.chat.id, open('./Images/Game/shop.jpg', 'rb'))
            bot.send_message(call.message.chat.id, f'<–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –ú–∞–∫—Å! –Ø –ø—Ä–æ–¥–∞—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–º–æ—á—å –≤ —Ä–∞–±–æ—Ç–µ. –ù–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑–≥—è–ª–Ω—É—Ç—å?>', reply_markup=markup)
        
        elif call.data == "shop_assortiment":
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_shop')
            for i in range(0, len(db_manager.show_assortiment())):
                s =  'check_coins' + '|' + str(i)
                item2 = types.InlineKeyboardButton(f'{db_manager.show_assortiment()[i][0]}        {db_manager.show_prices()[i][0]}üí∞        –û—Å—Ç–∞–ª–æ—Å—å {db_manager.show_count()[i][0]} —à—Ç—É–∫!', callback_data=s)
                markup.add(item2)
            markup.add(item1)
            bot.send_photo(call.message.chat.id, open('./Images/Game/shop_assortiment.jpg', 'rb')) 
            bot.send_message(call.message.chat.id, f'–£ –≤–∞—Å {db_manager.show_coins("test")}üí∞', reply_markup=markup)
        
        elif 'check_coins' in call.data:
            second_param = call.data.split('|')[1]
            if int(db_manager.show_coins("test")) >= int(db_manager.show_prices()[int(second_param)][0]) and int(db_manager.show_count()[int(second_param)][0]) > 0:
                markup = types.InlineKeyboardMarkup(row_width=1)
                s = 'sucsessfull_shopping'  + '|' + call.data.split('|')[1]
                item1 = types.InlineKeyboardButton('–î–∞', callback_data=s)   
                item2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_shop') 
                markup.add(item1, item2)            
                bot.send_message(call.message.chat.id, f'–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)  
            elif int(db_manager.show_count()[int(second_param)][0]) == 0:
                markup = types.InlineKeyboardMarkup(row_width=1)     
                item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_shop')     
                markup.add(item1)
                bot.send_message(call.message.chat.id, f'–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!', reply_markup=markup)  
            else:
                markup = types.InlineKeyboardMarkup(row_width=1)     
                item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_shop')     
                markup.add(item1)
                bot.send_message(call.message.chat.id, f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!', reply_markup=markup)  

        elif 'sucsessfull_shopping' in call.data:
            second_param = call.data.split('|')[1]
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥->', callback_data='button_shop')

            if db_manager.show_assortiment()[int(second_param)][0] == 'Battery':
                battery_statement = True
                battery_timer = 100
                battery = 4

            les_coins = int(db_manager.show_coins("test"))-int(db_manager.show_prices()[int(second_param)][0])
            les_value = int(db_manager.show_count()[int(second_param)][0])-1

            db_manager.update_coins("test", str(les_coins))
            db_manager.update_assortiment(db_manager.show_assortiment()[int(second_param)][0], str(les_value))

            markup.add(item1)
            bot.send_message(call.message.chat.id, f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {db_manager.show_assortiment()[int(second_param)][0]}!', reply_markup=markup)  




        elif call.data == "back2":
            markup = types.InlineKeyboardMarkup(row_width=2)
            print(timer)
            item1 = types.InlineKeyboardButton('–ö–∞–º–µ—Ä—ãüì∏', callback_data='button_camera')
            item2 = types.InlineKeyboardButton('–ß–∞—Å—ã‚è∞', callback_data='button_clocks')
            item3 = types.InlineKeyboardButton('–õ–µ–≤–∞—è –¥–≤–µ—Ä—åüö™', callback_data='button_left_door')
            item4 = types.InlineKeyboardButton('–ü—Ä–∞–≤–∞—è –¥–≤–µ—Ä—åüö™', callback_data='button_right_door')
            item5 = types.InlineKeyboardButton('–ú–∞–≥–∞–∑–∏–Ωüè¨', callback_data='button_shop')
            markup.add(item1, item2, item3, item4, item5)
            bot.send_photo(call.message.chat.id, open('./Images/Game/security_room.jpeg', 'rb'), reply_markup=markup)
    
        elif call.data == "back1":
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton('–ò–≥—Ä–∞—Ç—å', callback_data='button_game')
            item2 = types.InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å', callback_data='button_profile')
            markup.add(item1,item2)
            bot.send_message(call.message.chat.id, '–ú–µ–Ω—é:', reply_markup=markup)

        if go_cleaner == True:
            if cleaner_storage:
                b = randint(0, 11)
                ost = b%2
                if ost == 0: 
                    cleaner_guest = True
                    cleaner_storage = False
                    go_cleaner = False
                    return 
                else:
                    cleaner_vine = True
                    cleaner_storage = False
                    go_cleaner = False 
                    return 

            else:

                if cleaner_guest:
                    a = randint(0, 3)
                    if a == 0:
                        cleaner_door_left = True
                        cleaner_guest = False
                        go_cleaner = False
                        return 
                    else: 
                        cleaner_vine = True
                        cleaner_storage = False
                        go_cleaner = False 
                        return 

                elif cleaner_vine:
                    a = randint(0, 5)
                    global cleaner_vent
                    if a == 0 or a == 1:
                        cleaner_door_right = True
                        cleaner_vine = False
                        go_cleaner = False
                        return 
                    elif a == 2:
                        cleaner_vent = True
                        cleaner_storage = False
                        go_cleaner = False
                        return 
                    else:
                        cleaner_guest = True
                        cleaner_storage = False
                        go_cleaner = False 
                        return 

                elif cleaner_door_right:
                    if right_door_statement == False:
                        cleaner_vine = True
                        cleaner_storage = False
                        go_cleaner = False 
                        return 
                
                elif cleaner_door_left:
                    if left_door_statement == False:
                        cleaner_guest = True
                        cleaner_storage = False
                        go_cleaner = False 
                        return 

                elif cleaner_vent:
                    if ventilation_statement == False:
                        cleaner_vine = True
                        cleaner_storage = False
                        go_cleaner = False 
                        return 

        if end == True:
            bot.send_message(call.message.chat.id, f"{art.tprint('7:00 AM')}")
            username = call.message.from_user.username
            db_manager.add_coins_wins(username, "1", "10")
            bot.send_message(call.message.chat.id, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! (+1 –ø–æ–±–µ–¥–∞, +10 –º–æ–Ω–µ—Ç)")

        elif end == True and end_bad == True:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.")
            game_started == False

        elif cleaner_door_right == True and right_door_statement == True:
            time.sleep(5)
            if right_door_statement != False:
                bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —É–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∑–∞–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑")
                end_bad = True
                game_started == False
            else:
                go_cleaner = True

        elif cleaner_door_left == True and left_door_statement == True:
            time.sleep(5)
            if left_door_statement != False:
                bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —É–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∑–∞–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑")
                end_bad = True
                game_started == False
            else:
                go_cleaner = True

        elif cleaner_vent == True and ventilation_statement == True:
            time.sleep(5)
            if ventilation_statement != False:
                bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —É–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∑–∞–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑")
                end_bad = True
                game_started == False
            else:
                go_cleaner = True
    
def bot_thread():
    bot.infinity_polling(print("Bot started."), none_stop=True)


def timer_thread():
    #–ó–∞–º–µ—Ç–∏–ª –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä –Ω–µ —à–µ–ª, –ø–æ—á–∏–Ω–∏–ª.
    global end, end_bad
    global timer
    global vent_timer
    global right_door_timer
    global left_door_timer
    global left_door_statement
    global right_door_statement
    global ventilation_statement
    while True:
        if game_started != True:
            print("Game not started")
        else:
            while True:
                time.sleep(1)
                timer -= 1
                if timer == 0:
                    end = True
                    break
        
                if right_door_timer > 0:
                    if right_door_statement == False:
                            right_door_timer -= 1
        
                else:
                    right_door_statement = True
        
                if left_door_timer > 0:
                    if left_door_statement == False:
                        left_door_timer -= 1
                
                else:
                    left_door_statement = True
        
                
                if vent_timer > 0:
                    if ventilation_statement == False:
                        vent_timer -= 1
                
                else:
                    ventilation_statement = True
                if end or end_bad == True:
                    break

def timing_thread():
    global timer, go_cleaner, go_hoverboard, go_—Årazy, go_cyborg, go_vodka, go_barmen, night, game_started, end, end_bad
    go_cleaner = False
    while True:
        if game_started != True:
            print("Game not started")
        else:
            while True:
                if night == 1:
                    if timer >= 541: #–†–∞–Ω–¥–æ–º –¥–æ 1 —á–∞—Å–∞ –Ω–æ—á–∏(–≤ –∏–≥—Ä–µ) –ø–æ–π–¥–µ—Ç –ª–∏ —É–±–æ—Ä—â–∏–∫ –∏–ª–∏ –Ω–µ—Ç(—à–∞–Ω—Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π)
                        time.sleep(5)
                        a = randint(1, 100)
                        if a == 50:
                            go_cleaner = True
                            print(go_cleaner)
                        else: 
                            print(timer)
        
                    elif timer <= 540 and timer > 450: #–†–∞–Ω–¥–æ–º –ø–æ–π–¥–µ—Ç –ª–∏ —É–±–æ—Ä—â–∏–∫ –≤ —á–∞—Å –Ω–æ—á–∏.
                        time.sleep(5)
                        a = randint(1, 5)
                        if a == 2 or a == 3:
                            go_cleaner = True
                            print(go_cleaner)
                        else:
                            print('z')
                            time.sleep(5)
                            go_cleaner = False
                            print(timer)
        
                    elif timer <= 450 and timer > 360: #–ú–Ω–µ –¥–∞–ª—å—à–µ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–∞–∫ —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —ç—Ç–æ —Ç–æ–∂–µ —Ä–∞–Ω–¥–æ–º –Ω–∞ —É–±–æ—Ä—â–∏–∫–∞ –ø–µ—Ä–≤–æ–π –Ω–æ—á—å—é.
                        time.sleep(5)
                        a = randint(1, 5)
                        if a == 2 or 3:
                            go_cleaner = True
                        else:
                            time.sleep(5)
                            a = randint(1,4)
                            if a == 2 or a == 3:
                                go_cleaner == True
                                print(go_cleaner)
                            else:
                                print('z')
                                go_cleaner = False
                                print(timer)
        
                    elif timer <= 360 and timer > 80:
                        time.sleep(5)
                        a = randint(1, 5)
                        if a == 2 or a == 3:
                            go_cleaner = True
                            print(go_cleaner)
                        else:
                            print('z')
                            time.sleep(5)
                            go_cleaner = True
                            print(timer)
        
                    elif timer <= 80:
                        time.sleep(5)
                        a = randint(1, 4)
                        if a == 2 or a == 3 or a == 4:
                            go_cleaner = True
                        else:
                            print('z')
                            time.sleep(5)
                            go_cleaner = False
                            print(timer)
                    elif end or end_bad == True:
                        break

if __name__ == '__main__':
    db_manager.update_coins("test", '100')
    db_manager.update_assortiment("Tablet", '1')
    db_manager.update_assortiment("Battery", '4')
    polling_thread = threading.Thread(target=bot_thread)
    polling_timer = threading.Thread(target=timer_thread)
    polling_timings = threading.Thread(target=timing_thread)
    polling_timer.start()
    polling_timings.start()
    polling_thread.start()
